syntax = "proto3";

//d:\Go\test\src\nRIC\api\v1\pb\db>protoc.exe ../msgdef.proto ./dbsvc.proto --go_out=plugins=grpc:. -I../. -I./.

package db;

option go_package=".;db";
import "google/protobuf/timestamp.proto";
import "msgdef.proto";
import "moitable.proto";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//database agent

service dbService {
    rpc rpcHandleMsg(GrpcMsg) returns (GrpcReply) {};

    rpc RouteTableInsert(RouteTableInsertRequest) returns (RouteTableInsertResponse);
    rpc RouteTableRead(RouteTableReadRequest) returns (RouteTableReadResponse);
    rpc RouteTableUpdate(RouteTableUpdateRequest) returns (RouteTableUpdateResponse);
    rpc RouteTableDelete(RouteTableDeleteRequest) returns (RouteTableDeleteResponse);
    rpc RouteTableReadAll(RouteTableReadAllRequest) returns (RouteTableReadAllResponse);

    rpc RANFunctionsTableInsert(RANFunctionsTableInsertRequest) returns (RANFunctionsTableInsertResponse);
    rpc RANFunctionsTableRead(RANFunctionsTableReadRequest) returns (RANFunctionsTableReadResponse);
    rpc RANFunctionsTableUpdate(RANFunctionsTableUpdateRequest) returns (RANFunctionsTableUpdateResponse);
    rpc RANFunctionsTableDelete(RANFunctionsTableDeleteRequest) returns (RANFunctionsTableDeleteResponse);
    rpc RANFunctionsTableReadAll(RANFunctionsTableReadAllRequest) returns (RANFunctionsTableReadAllResponse);

    rpc MOITableInsert(MOITableInsertRequest) returns (MOITableInsertResponse);
    rpc MOITableRead(MOITableReadRequest) returns (MOITableReadResponse);
    rpc MOITableUpdate(MOITableUpdateRequest) returns (MOITableUpdateResponse);
    rpc MOITableDelete(MOITableDeleteRequest) returns (MOITableDeleteResponse);
    rpc MOITableReadAll(MOITableReadAllRequest) returns (MOITableReadAllResponse);

}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
message RouteTable {
    // Unique integer identifier of the route table
    int64 SubIdXapp     = 1;

    // output
    string Topic        = 2;
    int64  SubIdRan     = 3;

    // Date and time to remind the route table
    google.protobuf.Timestamp reminder = 4;
}

// Request data to create new route table
message RouteTableInsertRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Task entity to add
    RouteTable routeTable = 2;
}

// Contains data of created route table
message RouteTableInsertResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // SubId of created task
    int64 SubIdXapp = 2;
}

// Request data to read route table
message RouteTableReadRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the route table
    int64 SubIdXapp = 2;
}

// Contains route table data specified in by ID request
message RouteTableReadResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Task entity read by SubIdXapp
    RouteTable routeTable = 2;
}

// Request data to update route table
message RouteTableUpdateRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Task entity to update
    RouteTable routeTable = 2;
}

// Contains status of update operation
message RouteTableUpdateResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

// Request data to delete route table
message RouteTableDeleteRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the route table to delete
    int64 SubIdXapp = 2;
}

// Contains status of delete operation
message RouteTableDeleteResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

// Request data to read all route table
message RouteTableReadAllRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;
}

// Contains list of all route tables
message RouteTableReadAllResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // List of all route tables
    repeated RouteTable routeTables = 2;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//from this line to line 256
message RANFunctionsTable {
	//RanNameStr
	string GlobalE2NodeIDStr       	= 1;
    uint32 ranFunctionID     		= 2;
    uint32 ranFunctionRevision      = 3;
    string ranFunctionOID 			= 4;
    bytes ranFunctionDefinition   	= 5;

	 // Date and time to remind the RANFunctions table
    google.protobuf.Timestamp reminder = 6;
}

// Request data to create new RANFunctions table
message RANFunctionsTableInsertRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Task entity to add
    RANFunctionsTable RANFunctionsTable = 2;
}

// Contains data of created RANFunctions table
message RANFunctionsTableInsertResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // SubId of created task
    int32 ResultCode = 2;
}

// Request data to read RANFunctions table
message RANFunctionsTableReadRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

	//RanNameStr
	string GlobalE2NodeIDStr       	= 2;
    uint32 ranFunctionID     		= 3;
    uint32 ranFunctionRevision      = 4;
    string ranFunctionOID 			= 5;
}

// Contains RANFunctions table data specified in by ID request
message RANFunctionsTableReadResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Task entity read by SubIdXapp
    RANFunctionsTable RANFunctionsTable = 2;
}

// Request data to update RANFunctions table
message RANFunctionsTableUpdateRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Task entity to update
    RANFunctionsTable RANFunctionsTable = 2;
}

// Contains status of update operation
message RANFunctionsTableUpdateResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    uint32 updated = 2;
}

// Request data to delete RANFunctions table
message RANFunctionsTableDeleteRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the RANFunctions table to delete

	//RanNameStr
	string GlobalE2NodeIDStr       	= 2;
    uint32 ranFunctionID     		= 3;
    uint32 ranFunctionRevision      = 4;
    string ranFunctionOID 			= 5;
}

// Contains status of delete operation
message RANFunctionsTableDeleteResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    uint32 deleted = 2;
}

// Request data to read all RANFunctions table
message RANFunctionsTableReadAllRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;
}

// Contains list of all RANFunctions tables
message RANFunctionsTableReadAllResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // List of all RANFunctions tables
    repeated RANFunctionsTable RANFunctionsTables = 2;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////