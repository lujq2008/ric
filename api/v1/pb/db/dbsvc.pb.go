// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dbsvc.proto

package db // import "."

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamppb "google.golang.org/protobuf/types/known/timestamppb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
type RouteTable struct {
	// Unique integer identifier of the route table
	SubIdXapp int64 `protobuf:"varint,1,opt,name=SubIdXapp,proto3" json:"SubIdXapp,omitempty"`
	// output
	Topic    string `protobuf:"bytes,2,opt,name=Topic,proto3" json:"Topic,omitempty"`
	SubIdRan int64  `protobuf:"varint,3,opt,name=SubIdRan,proto3" json:"SubIdRan,omitempty"`
	// Date and time to remind the route table
	Reminder             *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=reminder,proto3" json:"reminder,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RouteTable) Reset()         { *m = RouteTable{} }
func (m *RouteTable) String() string { return proto.CompactTextString(m) }
func (*RouteTable) ProtoMessage()    {}
func (*RouteTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{0}
}
func (m *RouteTable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTable.Unmarshal(m, b)
}
func (m *RouteTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTable.Marshal(b, m, deterministic)
}
func (dst *RouteTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTable.Merge(dst, src)
}
func (m *RouteTable) XXX_Size() int {
	return xxx_messageInfo_RouteTable.Size(m)
}
func (m *RouteTable) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTable.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTable proto.InternalMessageInfo

func (m *RouteTable) GetSubIdXapp() int64 {
	if m != nil {
		return m.SubIdXapp
	}
	return 0
}

func (m *RouteTable) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *RouteTable) GetSubIdRan() int64 {
	if m != nil {
		return m.SubIdRan
	}
	return 0
}

func (m *RouteTable) GetReminder() *timestamppb.Timestamp {
	if m != nil {
		return m.Reminder
	}
	return nil
}

// Request data to create new route table
type RouteTableInsertRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Task entity to add
	RouteTable           *RouteTable `protobuf:"bytes,2,opt,name=routeTable,proto3" json:"routeTable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RouteTableInsertRequest) Reset()         { *m = RouteTableInsertRequest{} }
func (m *RouteTableInsertRequest) String() string { return proto.CompactTextString(m) }
func (*RouteTableInsertRequest) ProtoMessage()    {}
func (*RouteTableInsertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{1}
}
func (m *RouteTableInsertRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableInsertRequest.Unmarshal(m, b)
}
func (m *RouteTableInsertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableInsertRequest.Marshal(b, m, deterministic)
}
func (dst *RouteTableInsertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableInsertRequest.Merge(dst, src)
}
func (m *RouteTableInsertRequest) XXX_Size() int {
	return xxx_messageInfo_RouteTableInsertRequest.Size(m)
}
func (m *RouteTableInsertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableInsertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableInsertRequest proto.InternalMessageInfo

func (m *RouteTableInsertRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableInsertRequest) GetRouteTable() *RouteTable {
	if m != nil {
		return m.RouteTable
	}
	return nil
}

// Contains data of created route table
type RouteTableInsertResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// SubId of created task
	SubIdXapp            int64    `protobuf:"varint,2,opt,name=SubIdXapp,proto3" json:"SubIdXapp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteTableInsertResponse) Reset()         { *m = RouteTableInsertResponse{} }
func (m *RouteTableInsertResponse) String() string { return proto.CompactTextString(m) }
func (*RouteTableInsertResponse) ProtoMessage()    {}
func (*RouteTableInsertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{2}
}
func (m *RouteTableInsertResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableInsertResponse.Unmarshal(m, b)
}
func (m *RouteTableInsertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableInsertResponse.Marshal(b, m, deterministic)
}
func (dst *RouteTableInsertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableInsertResponse.Merge(dst, src)
}
func (m *RouteTableInsertResponse) XXX_Size() int {
	return xxx_messageInfo_RouteTableInsertResponse.Size(m)
}
func (m *RouteTableInsertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableInsertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableInsertResponse proto.InternalMessageInfo

func (m *RouteTableInsertResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableInsertResponse) GetSubIdXapp() int64 {
	if m != nil {
		return m.SubIdXapp
	}
	return 0
}

// Request data to read route table
type RouteTableReadRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Unique integer identifier of the route table
	SubIdXapp            int64    `protobuf:"varint,2,opt,name=SubIdXapp,proto3" json:"SubIdXapp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteTableReadRequest) Reset()         { *m = RouteTableReadRequest{} }
func (m *RouteTableReadRequest) String() string { return proto.CompactTextString(m) }
func (*RouteTableReadRequest) ProtoMessage()    {}
func (*RouteTableReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{3}
}
func (m *RouteTableReadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableReadRequest.Unmarshal(m, b)
}
func (m *RouteTableReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableReadRequest.Marshal(b, m, deterministic)
}
func (dst *RouteTableReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableReadRequest.Merge(dst, src)
}
func (m *RouteTableReadRequest) XXX_Size() int {
	return xxx_messageInfo_RouteTableReadRequest.Size(m)
}
func (m *RouteTableReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableReadRequest proto.InternalMessageInfo

func (m *RouteTableReadRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableReadRequest) GetSubIdXapp() int64 {
	if m != nil {
		return m.SubIdXapp
	}
	return 0
}

// Contains route table data specified in by ID request
type RouteTableReadResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Task entity read by SubIdXapp
	RouteTable           *RouteTable `protobuf:"bytes,2,opt,name=routeTable,proto3" json:"routeTable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RouteTableReadResponse) Reset()         { *m = RouteTableReadResponse{} }
func (m *RouteTableReadResponse) String() string { return proto.CompactTextString(m) }
func (*RouteTableReadResponse) ProtoMessage()    {}
func (*RouteTableReadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{4}
}
func (m *RouteTableReadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableReadResponse.Unmarshal(m, b)
}
func (m *RouteTableReadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableReadResponse.Marshal(b, m, deterministic)
}
func (dst *RouteTableReadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableReadResponse.Merge(dst, src)
}
func (m *RouteTableReadResponse) XXX_Size() int {
	return xxx_messageInfo_RouteTableReadResponse.Size(m)
}
func (m *RouteTableReadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableReadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableReadResponse proto.InternalMessageInfo

func (m *RouteTableReadResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableReadResponse) GetRouteTable() *RouteTable {
	if m != nil {
		return m.RouteTable
	}
	return nil
}

// Request data to update route table
type RouteTableUpdateRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Task entity to update
	RouteTable           *RouteTable `protobuf:"bytes,2,opt,name=routeTable,proto3" json:"routeTable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RouteTableUpdateRequest) Reset()         { *m = RouteTableUpdateRequest{} }
func (m *RouteTableUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*RouteTableUpdateRequest) ProtoMessage()    {}
func (*RouteTableUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{5}
}
func (m *RouteTableUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableUpdateRequest.Unmarshal(m, b)
}
func (m *RouteTableUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableUpdateRequest.Marshal(b, m, deterministic)
}
func (dst *RouteTableUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableUpdateRequest.Merge(dst, src)
}
func (m *RouteTableUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_RouteTableUpdateRequest.Size(m)
}
func (m *RouteTableUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableUpdateRequest proto.InternalMessageInfo

func (m *RouteTableUpdateRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableUpdateRequest) GetRouteTable() *RouteTable {
	if m != nil {
		return m.RouteTable
	}
	return nil
}

// Contains status of update operation
type RouteTableUpdateResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Contains number of entities have beed updated
	// Equals 1 in case of succesfull update
	Updated              int64    `protobuf:"varint,2,opt,name=updated,proto3" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteTableUpdateResponse) Reset()         { *m = RouteTableUpdateResponse{} }
func (m *RouteTableUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*RouteTableUpdateResponse) ProtoMessage()    {}
func (*RouteTableUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{6}
}
func (m *RouteTableUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableUpdateResponse.Unmarshal(m, b)
}
func (m *RouteTableUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableUpdateResponse.Marshal(b, m, deterministic)
}
func (dst *RouteTableUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableUpdateResponse.Merge(dst, src)
}
func (m *RouteTableUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_RouteTableUpdateResponse.Size(m)
}
func (m *RouteTableUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableUpdateResponse proto.InternalMessageInfo

func (m *RouteTableUpdateResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableUpdateResponse) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

// Request data to delete route table
type RouteTableDeleteRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Unique integer identifier of the route table to delete
	SubIdXapp            int64    `protobuf:"varint,2,opt,name=SubIdXapp,proto3" json:"SubIdXapp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteTableDeleteRequest) Reset()         { *m = RouteTableDeleteRequest{} }
func (m *RouteTableDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*RouteTableDeleteRequest) ProtoMessage()    {}
func (*RouteTableDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{7}
}
func (m *RouteTableDeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableDeleteRequest.Unmarshal(m, b)
}
func (m *RouteTableDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableDeleteRequest.Marshal(b, m, deterministic)
}
func (dst *RouteTableDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableDeleteRequest.Merge(dst, src)
}
func (m *RouteTableDeleteRequest) XXX_Size() int {
	return xxx_messageInfo_RouteTableDeleteRequest.Size(m)
}
func (m *RouteTableDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableDeleteRequest proto.InternalMessageInfo

func (m *RouteTableDeleteRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableDeleteRequest) GetSubIdXapp() int64 {
	if m != nil {
		return m.SubIdXapp
	}
	return 0
}

// Contains status of delete operation
type RouteTableDeleteResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Contains number of entities have beed deleted
	// Equals 1 in case of succesfull delete
	Deleted              int64    `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteTableDeleteResponse) Reset()         { *m = RouteTableDeleteResponse{} }
func (m *RouteTableDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*RouteTableDeleteResponse) ProtoMessage()    {}
func (*RouteTableDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{8}
}
func (m *RouteTableDeleteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableDeleteResponse.Unmarshal(m, b)
}
func (m *RouteTableDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableDeleteResponse.Marshal(b, m, deterministic)
}
func (dst *RouteTableDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableDeleteResponse.Merge(dst, src)
}
func (m *RouteTableDeleteResponse) XXX_Size() int {
	return xxx_messageInfo_RouteTableDeleteResponse.Size(m)
}
func (m *RouteTableDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableDeleteResponse proto.InternalMessageInfo

func (m *RouteTableDeleteResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableDeleteResponse) GetDeleted() int64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

// Request data to read all route table
type RouteTableReadAllRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteTableReadAllRequest) Reset()         { *m = RouteTableReadAllRequest{} }
func (m *RouteTableReadAllRequest) String() string { return proto.CompactTextString(m) }
func (*RouteTableReadAllRequest) ProtoMessage()    {}
func (*RouteTableReadAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{9}
}
func (m *RouteTableReadAllRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableReadAllRequest.Unmarshal(m, b)
}
func (m *RouteTableReadAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableReadAllRequest.Marshal(b, m, deterministic)
}
func (dst *RouteTableReadAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableReadAllRequest.Merge(dst, src)
}
func (m *RouteTableReadAllRequest) XXX_Size() int {
	return xxx_messageInfo_RouteTableReadAllRequest.Size(m)
}
func (m *RouteTableReadAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableReadAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableReadAllRequest proto.InternalMessageInfo

func (m *RouteTableReadAllRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

// Contains list of all route tables
type RouteTableReadAllResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// List of all route tables
	RouteTables          []*RouteTable `protobuf:"bytes,2,rep,name=routeTables,proto3" json:"routeTables,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RouteTableReadAllResponse) Reset()         { *m = RouteTableReadAllResponse{} }
func (m *RouteTableReadAllResponse) String() string { return proto.CompactTextString(m) }
func (*RouteTableReadAllResponse) ProtoMessage()    {}
func (*RouteTableReadAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{10}
}
func (m *RouteTableReadAllResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableReadAllResponse.Unmarshal(m, b)
}
func (m *RouteTableReadAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableReadAllResponse.Marshal(b, m, deterministic)
}
func (dst *RouteTableReadAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableReadAllResponse.Merge(dst, src)
}
func (m *RouteTableReadAllResponse) XXX_Size() int {
	return xxx_messageInfo_RouteTableReadAllResponse.Size(m)
}
func (m *RouteTableReadAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableReadAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableReadAllResponse proto.InternalMessageInfo

func (m *RouteTableReadAllResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableReadAllResponse) GetRouteTables() []*RouteTable {
	if m != nil {
		return m.RouteTables
	}
	return nil
}

// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// from this line to line 256
type RANFunctionsTable struct {
	// RanNameStr
	GlobalE2NodeIDStr     string `protobuf:"bytes,1,opt,name=GlobalE2NodeIDStr,proto3" json:"GlobalE2NodeIDStr,omitempty"`
	RanFunctionID         uint32 `protobuf:"varint,2,opt,name=ranFunctionID,proto3" json:"ranFunctionID,omitempty"`
	RanFunctionRevision   uint32 `protobuf:"varint,3,opt,name=ranFunctionRevision,proto3" json:"ranFunctionRevision,omitempty"`
	RanFunctionOID        string `protobuf:"bytes,4,opt,name=ranFunctionOID,proto3" json:"ranFunctionOID,omitempty"`
	RanFunctionDefinition []byte `protobuf:"bytes,5,opt,name=ranFunctionDefinition,proto3" json:"ranFunctionDefinition,omitempty"`
	// Date and time to remind the RANFunctions table
	Reminder             *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=reminder,proto3" json:"reminder,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RANFunctionsTable) Reset()         { *m = RANFunctionsTable{} }
func (m *RANFunctionsTable) String() string { return proto.CompactTextString(m) }
func (*RANFunctionsTable) ProtoMessage()    {}
func (*RANFunctionsTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{11}
}
func (m *RANFunctionsTable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RANFunctionsTable.Unmarshal(m, b)
}
func (m *RANFunctionsTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RANFunctionsTable.Marshal(b, m, deterministic)
}
func (dst *RANFunctionsTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RANFunctionsTable.Merge(dst, src)
}
func (m *RANFunctionsTable) XXX_Size() int {
	return xxx_messageInfo_RANFunctionsTable.Size(m)
}
func (m *RANFunctionsTable) XXX_DiscardUnknown() {
	xxx_messageInfo_RANFunctionsTable.DiscardUnknown(m)
}

var xxx_messageInfo_RANFunctionsTable proto.InternalMessageInfo

func (m *RANFunctionsTable) GetGlobalE2NodeIDStr() string {
	if m != nil {
		return m.GlobalE2NodeIDStr
	}
	return ""
}

func (m *RANFunctionsTable) GetRanFunctionID() uint32 {
	if m != nil {
		return m.RanFunctionID
	}
	return 0
}

func (m *RANFunctionsTable) GetRanFunctionRevision() uint32 {
	if m != nil {
		return m.RanFunctionRevision
	}
	return 0
}

func (m *RANFunctionsTable) GetRanFunctionOID() string {
	if m != nil {
		return m.RanFunctionOID
	}
	return ""
}

func (m *RANFunctionsTable) GetRanFunctionDefinition() []byte {
	if m != nil {
		return m.RanFunctionDefinition
	}
	return nil
}

func (m *RANFunctionsTable) GetReminder() *timestamppb.Timestamp {
	if m != nil {
		return m.Reminder
	}
	return nil
}

// Request data to create new RANFunctions table
type RANFunctionsTableInsertRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Task entity to add
	RANFunctionsTable    *RANFunctionsTable `protobuf:"bytes,2,opt,name=RANFunctionsTable,proto3" json:"RANFunctionsTable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RANFunctionsTableInsertRequest) Reset()         { *m = RANFunctionsTableInsertRequest{} }
func (m *RANFunctionsTableInsertRequest) String() string { return proto.CompactTextString(m) }
func (*RANFunctionsTableInsertRequest) ProtoMessage()    {}
func (*RANFunctionsTableInsertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{12}
}
func (m *RANFunctionsTableInsertRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RANFunctionsTableInsertRequest.Unmarshal(m, b)
}
func (m *RANFunctionsTableInsertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RANFunctionsTableInsertRequest.Marshal(b, m, deterministic)
}
func (dst *RANFunctionsTableInsertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RANFunctionsTableInsertRequest.Merge(dst, src)
}
func (m *RANFunctionsTableInsertRequest) XXX_Size() int {
	return xxx_messageInfo_RANFunctionsTableInsertRequest.Size(m)
}
func (m *RANFunctionsTableInsertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RANFunctionsTableInsertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RANFunctionsTableInsertRequest proto.InternalMessageInfo

func (m *RANFunctionsTableInsertRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RANFunctionsTableInsertRequest) GetRANFunctionsTable() *RANFunctionsTable {
	if m != nil {
		return m.RANFunctionsTable
	}
	return nil
}

// Contains data of created RANFunctions table
type RANFunctionsTableInsertResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// SubId of created task
	ResultCode           int32    `protobuf:"varint,2,opt,name=ResultCode,proto3" json:"ResultCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RANFunctionsTableInsertResponse) Reset()         { *m = RANFunctionsTableInsertResponse{} }
func (m *RANFunctionsTableInsertResponse) String() string { return proto.CompactTextString(m) }
func (*RANFunctionsTableInsertResponse) ProtoMessage()    {}
func (*RANFunctionsTableInsertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{13}
}
func (m *RANFunctionsTableInsertResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RANFunctionsTableInsertResponse.Unmarshal(m, b)
}
func (m *RANFunctionsTableInsertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RANFunctionsTableInsertResponse.Marshal(b, m, deterministic)
}
func (dst *RANFunctionsTableInsertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RANFunctionsTableInsertResponse.Merge(dst, src)
}
func (m *RANFunctionsTableInsertResponse) XXX_Size() int {
	return xxx_messageInfo_RANFunctionsTableInsertResponse.Size(m)
}
func (m *RANFunctionsTableInsertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RANFunctionsTableInsertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RANFunctionsTableInsertResponse proto.InternalMessageInfo

func (m *RANFunctionsTableInsertResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RANFunctionsTableInsertResponse) GetResultCode() int32 {
	if m != nil {
		return m.ResultCode
	}
	return 0
}

// Request data to read RANFunctions table
type RANFunctionsTableReadRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// RanNameStr
	GlobalE2NodeIDStr    string   `protobuf:"bytes,2,opt,name=GlobalE2NodeIDStr,proto3" json:"GlobalE2NodeIDStr,omitempty"`
	RanFunctionID        uint32   `protobuf:"varint,3,opt,name=ranFunctionID,proto3" json:"ranFunctionID,omitempty"`
	RanFunctionRevision  uint32   `protobuf:"varint,4,opt,name=ranFunctionRevision,proto3" json:"ranFunctionRevision,omitempty"`
	RanFunctionOID       string   `protobuf:"bytes,5,opt,name=ranFunctionOID,proto3" json:"ranFunctionOID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RANFunctionsTableReadRequest) Reset()         { *m = RANFunctionsTableReadRequest{} }
func (m *RANFunctionsTableReadRequest) String() string { return proto.CompactTextString(m) }
func (*RANFunctionsTableReadRequest) ProtoMessage()    {}
func (*RANFunctionsTableReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{14}
}
func (m *RANFunctionsTableReadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RANFunctionsTableReadRequest.Unmarshal(m, b)
}
func (m *RANFunctionsTableReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RANFunctionsTableReadRequest.Marshal(b, m, deterministic)
}
func (dst *RANFunctionsTableReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RANFunctionsTableReadRequest.Merge(dst, src)
}
func (m *RANFunctionsTableReadRequest) XXX_Size() int {
	return xxx_messageInfo_RANFunctionsTableReadRequest.Size(m)
}
func (m *RANFunctionsTableReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RANFunctionsTableReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RANFunctionsTableReadRequest proto.InternalMessageInfo

func (m *RANFunctionsTableReadRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RANFunctionsTableReadRequest) GetGlobalE2NodeIDStr() string {
	if m != nil {
		return m.GlobalE2NodeIDStr
	}
	return ""
}

func (m *RANFunctionsTableReadRequest) GetRanFunctionID() uint32 {
	if m != nil {
		return m.RanFunctionID
	}
	return 0
}

func (m *RANFunctionsTableReadRequest) GetRanFunctionRevision() uint32 {
	if m != nil {
		return m.RanFunctionRevision
	}
	return 0
}

func (m *RANFunctionsTableReadRequest) GetRanFunctionOID() string {
	if m != nil {
		return m.RanFunctionOID
	}
	return ""
}

// Contains RANFunctions table data specified in by ID request
type RANFunctionsTableReadResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Task entity read by SubIdXapp
	RANFunctionsTable    *RANFunctionsTable `protobuf:"bytes,2,opt,name=RANFunctionsTable,proto3" json:"RANFunctionsTable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RANFunctionsTableReadResponse) Reset()         { *m = RANFunctionsTableReadResponse{} }
func (m *RANFunctionsTableReadResponse) String() string { return proto.CompactTextString(m) }
func (*RANFunctionsTableReadResponse) ProtoMessage()    {}
func (*RANFunctionsTableReadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{15}
}
func (m *RANFunctionsTableReadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RANFunctionsTableReadResponse.Unmarshal(m, b)
}
func (m *RANFunctionsTableReadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RANFunctionsTableReadResponse.Marshal(b, m, deterministic)
}
func (dst *RANFunctionsTableReadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RANFunctionsTableReadResponse.Merge(dst, src)
}
func (m *RANFunctionsTableReadResponse) XXX_Size() int {
	return xxx_messageInfo_RANFunctionsTableReadResponse.Size(m)
}
func (m *RANFunctionsTableReadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RANFunctionsTableReadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RANFunctionsTableReadResponse proto.InternalMessageInfo

func (m *RANFunctionsTableReadResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RANFunctionsTableReadResponse) GetRANFunctionsTable() *RANFunctionsTable {
	if m != nil {
		return m.RANFunctionsTable
	}
	return nil
}

// Request data to update RANFunctions table
type RANFunctionsTableUpdateRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Task entity to update
	RANFunctionsTable    *RANFunctionsTable `protobuf:"bytes,2,opt,name=RANFunctionsTable,proto3" json:"RANFunctionsTable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RANFunctionsTableUpdateRequest) Reset()         { *m = RANFunctionsTableUpdateRequest{} }
func (m *RANFunctionsTableUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*RANFunctionsTableUpdateRequest) ProtoMessage()    {}
func (*RANFunctionsTableUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{16}
}
func (m *RANFunctionsTableUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RANFunctionsTableUpdateRequest.Unmarshal(m, b)
}
func (m *RANFunctionsTableUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RANFunctionsTableUpdateRequest.Marshal(b, m, deterministic)
}
func (dst *RANFunctionsTableUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RANFunctionsTableUpdateRequest.Merge(dst, src)
}
func (m *RANFunctionsTableUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_RANFunctionsTableUpdateRequest.Size(m)
}
func (m *RANFunctionsTableUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RANFunctionsTableUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RANFunctionsTableUpdateRequest proto.InternalMessageInfo

func (m *RANFunctionsTableUpdateRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RANFunctionsTableUpdateRequest) GetRANFunctionsTable() *RANFunctionsTable {
	if m != nil {
		return m.RANFunctionsTable
	}
	return nil
}

// Contains status of update operation
type RANFunctionsTableUpdateResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Contains number of entities have beed updated
	// Equals 1 in case of succesfull update
	Updated              uint32   `protobuf:"varint,2,opt,name=updated,proto3" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RANFunctionsTableUpdateResponse) Reset()         { *m = RANFunctionsTableUpdateResponse{} }
func (m *RANFunctionsTableUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*RANFunctionsTableUpdateResponse) ProtoMessage()    {}
func (*RANFunctionsTableUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{17}
}
func (m *RANFunctionsTableUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RANFunctionsTableUpdateResponse.Unmarshal(m, b)
}
func (m *RANFunctionsTableUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RANFunctionsTableUpdateResponse.Marshal(b, m, deterministic)
}
func (dst *RANFunctionsTableUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RANFunctionsTableUpdateResponse.Merge(dst, src)
}
func (m *RANFunctionsTableUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_RANFunctionsTableUpdateResponse.Size(m)
}
func (m *RANFunctionsTableUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RANFunctionsTableUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RANFunctionsTableUpdateResponse proto.InternalMessageInfo

func (m *RANFunctionsTableUpdateResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RANFunctionsTableUpdateResponse) GetUpdated() uint32 {
	if m != nil {
		return m.Updated
	}
	return 0
}

// Request data to delete RANFunctions table
type RANFunctionsTableDeleteRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// RanNameStr
	GlobalE2NodeIDStr    string   `protobuf:"bytes,2,opt,name=GlobalE2NodeIDStr,proto3" json:"GlobalE2NodeIDStr,omitempty"`
	RanFunctionID        uint32   `protobuf:"varint,3,opt,name=ranFunctionID,proto3" json:"ranFunctionID,omitempty"`
	RanFunctionRevision  uint32   `protobuf:"varint,4,opt,name=ranFunctionRevision,proto3" json:"ranFunctionRevision,omitempty"`
	RanFunctionOID       string   `protobuf:"bytes,5,opt,name=ranFunctionOID,proto3" json:"ranFunctionOID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RANFunctionsTableDeleteRequest) Reset()         { *m = RANFunctionsTableDeleteRequest{} }
func (m *RANFunctionsTableDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*RANFunctionsTableDeleteRequest) ProtoMessage()    {}
func (*RANFunctionsTableDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{18}
}
func (m *RANFunctionsTableDeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RANFunctionsTableDeleteRequest.Unmarshal(m, b)
}
func (m *RANFunctionsTableDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RANFunctionsTableDeleteRequest.Marshal(b, m, deterministic)
}
func (dst *RANFunctionsTableDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RANFunctionsTableDeleteRequest.Merge(dst, src)
}
func (m *RANFunctionsTableDeleteRequest) XXX_Size() int {
	return xxx_messageInfo_RANFunctionsTableDeleteRequest.Size(m)
}
func (m *RANFunctionsTableDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RANFunctionsTableDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RANFunctionsTableDeleteRequest proto.InternalMessageInfo

func (m *RANFunctionsTableDeleteRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RANFunctionsTableDeleteRequest) GetGlobalE2NodeIDStr() string {
	if m != nil {
		return m.GlobalE2NodeIDStr
	}
	return ""
}

func (m *RANFunctionsTableDeleteRequest) GetRanFunctionID() uint32 {
	if m != nil {
		return m.RanFunctionID
	}
	return 0
}

func (m *RANFunctionsTableDeleteRequest) GetRanFunctionRevision() uint32 {
	if m != nil {
		return m.RanFunctionRevision
	}
	return 0
}

func (m *RANFunctionsTableDeleteRequest) GetRanFunctionOID() string {
	if m != nil {
		return m.RanFunctionOID
	}
	return ""
}

// Contains status of delete operation
type RANFunctionsTableDeleteResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Contains number of entities have beed deleted
	// Equals 1 in case of succesfull delete
	Deleted              uint32   `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RANFunctionsTableDeleteResponse) Reset()         { *m = RANFunctionsTableDeleteResponse{} }
func (m *RANFunctionsTableDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*RANFunctionsTableDeleteResponse) ProtoMessage()    {}
func (*RANFunctionsTableDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{19}
}
func (m *RANFunctionsTableDeleteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RANFunctionsTableDeleteResponse.Unmarshal(m, b)
}
func (m *RANFunctionsTableDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RANFunctionsTableDeleteResponse.Marshal(b, m, deterministic)
}
func (dst *RANFunctionsTableDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RANFunctionsTableDeleteResponse.Merge(dst, src)
}
func (m *RANFunctionsTableDeleteResponse) XXX_Size() int {
	return xxx_messageInfo_RANFunctionsTableDeleteResponse.Size(m)
}
func (m *RANFunctionsTableDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RANFunctionsTableDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RANFunctionsTableDeleteResponse proto.InternalMessageInfo

func (m *RANFunctionsTableDeleteResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RANFunctionsTableDeleteResponse) GetDeleted() uint32 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

// Request data to read all RANFunctions table
type RANFunctionsTableReadAllRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RANFunctionsTableReadAllRequest) Reset()         { *m = RANFunctionsTableReadAllRequest{} }
func (m *RANFunctionsTableReadAllRequest) String() string { return proto.CompactTextString(m) }
func (*RANFunctionsTableReadAllRequest) ProtoMessage()    {}
func (*RANFunctionsTableReadAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{20}
}
func (m *RANFunctionsTableReadAllRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RANFunctionsTableReadAllRequest.Unmarshal(m, b)
}
func (m *RANFunctionsTableReadAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RANFunctionsTableReadAllRequest.Marshal(b, m, deterministic)
}
func (dst *RANFunctionsTableReadAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RANFunctionsTableReadAllRequest.Merge(dst, src)
}
func (m *RANFunctionsTableReadAllRequest) XXX_Size() int {
	return xxx_messageInfo_RANFunctionsTableReadAllRequest.Size(m)
}
func (m *RANFunctionsTableReadAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RANFunctionsTableReadAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RANFunctionsTableReadAllRequest proto.InternalMessageInfo

func (m *RANFunctionsTableReadAllRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

// Contains list of all RANFunctions tables
type RANFunctionsTableReadAllResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// List of all RANFunctions tables
	RANFunctionsTables   []*RANFunctionsTable `protobuf:"bytes,2,rep,name=RANFunctionsTables,proto3" json:"RANFunctionsTables,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RANFunctionsTableReadAllResponse) Reset()         { *m = RANFunctionsTableReadAllResponse{} }
func (m *RANFunctionsTableReadAllResponse) String() string { return proto.CompactTextString(m) }
func (*RANFunctionsTableReadAllResponse) ProtoMessage()    {}
func (*RANFunctionsTableReadAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbsvc_78cbf87727d25476, []int{21}
}
func (m *RANFunctionsTableReadAllResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RANFunctionsTableReadAllResponse.Unmarshal(m, b)
}
func (m *RANFunctionsTableReadAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RANFunctionsTableReadAllResponse.Marshal(b, m, deterministic)
}
func (dst *RANFunctionsTableReadAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RANFunctionsTableReadAllResponse.Merge(dst, src)
}
func (m *RANFunctionsTableReadAllResponse) XXX_Size() int {
	return xxx_messageInfo_RANFunctionsTableReadAllResponse.Size(m)
}
func (m *RANFunctionsTableReadAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RANFunctionsTableReadAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RANFunctionsTableReadAllResponse proto.InternalMessageInfo

func (m *RANFunctionsTableReadAllResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RANFunctionsTableReadAllResponse) GetRANFunctionsTables() []*RANFunctionsTable {
	if m != nil {
		return m.RANFunctionsTables
	}
	return nil
}

func init() {
	proto.RegisterType((*RouteTable)(nil), "db.RouteTable")
	proto.RegisterType((*RouteTableInsertRequest)(nil), "db.RouteTableInsertRequest")
	proto.RegisterType((*RouteTableInsertResponse)(nil), "db.RouteTableInsertResponse")
	proto.RegisterType((*RouteTableReadRequest)(nil), "db.RouteTableReadRequest")
	proto.RegisterType((*RouteTableReadResponse)(nil), "db.RouteTableReadResponse")
	proto.RegisterType((*RouteTableUpdateRequest)(nil), "db.RouteTableUpdateRequest")
	proto.RegisterType((*RouteTableUpdateResponse)(nil), "db.RouteTableUpdateResponse")
	proto.RegisterType((*RouteTableDeleteRequest)(nil), "db.RouteTableDeleteRequest")
	proto.RegisterType((*RouteTableDeleteResponse)(nil), "db.RouteTableDeleteResponse")
	proto.RegisterType((*RouteTableReadAllRequest)(nil), "db.RouteTableReadAllRequest")
	proto.RegisterType((*RouteTableReadAllResponse)(nil), "db.RouteTableReadAllResponse")
	proto.RegisterType((*RANFunctionsTable)(nil), "db.RANFunctionsTable")
	proto.RegisterType((*RANFunctionsTableInsertRequest)(nil), "db.RANFunctionsTableInsertRequest")
	proto.RegisterType((*RANFunctionsTableInsertResponse)(nil), "db.RANFunctionsTableInsertResponse")
	proto.RegisterType((*RANFunctionsTableReadRequest)(nil), "db.RANFunctionsTableReadRequest")
	proto.RegisterType((*RANFunctionsTableReadResponse)(nil), "db.RANFunctionsTableReadResponse")
	proto.RegisterType((*RANFunctionsTableUpdateRequest)(nil), "db.RANFunctionsTableUpdateRequest")
	proto.RegisterType((*RANFunctionsTableUpdateResponse)(nil), "db.RANFunctionsTableUpdateResponse")
	proto.RegisterType((*RANFunctionsTableDeleteRequest)(nil), "db.RANFunctionsTableDeleteRequest")
	proto.RegisterType((*RANFunctionsTableDeleteResponse)(nil), "db.RANFunctionsTableDeleteResponse")
	proto.RegisterType((*RANFunctionsTableReadAllRequest)(nil), "db.RANFunctionsTableReadAllRequest")
	proto.RegisterType((*RANFunctionsTableReadAllResponse)(nil), "db.RANFunctionsTableReadAllResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DbServiceClient is the client API for DbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DbServiceClient interface {
	RpcHandleMsg(ctx context.Context, in *GrpcMsg, opts ...grpc.CallOption) (*GrpcReply, error)
	RouteTableInsert(ctx context.Context, in *RouteTableInsertRequest, opts ...grpc.CallOption) (*RouteTableInsertResponse, error)
	RouteTableRead(ctx context.Context, in *RouteTableReadRequest, opts ...grpc.CallOption) (*RouteTableReadResponse, error)
	RouteTableUpdate(ctx context.Context, in *RouteTableUpdateRequest, opts ...grpc.CallOption) (*RouteTableUpdateResponse, error)
	RouteTableDelete(ctx context.Context, in *RouteTableDeleteRequest, opts ...grpc.CallOption) (*RouteTableDeleteResponse, error)
	RouteTableReadAll(ctx context.Context, in *RouteTableReadAllRequest, opts ...grpc.CallOption) (*RouteTableReadAllResponse, error)
	RANFunctionsTableInsert(ctx context.Context, in *RANFunctionsTableInsertRequest, opts ...grpc.CallOption) (*RANFunctionsTableInsertResponse, error)
	RANFunctionsTableRead(ctx context.Context, in *RANFunctionsTableReadRequest, opts ...grpc.CallOption) (*RANFunctionsTableReadResponse, error)
	RANFunctionsTableUpdate(ctx context.Context, in *RANFunctionsTableUpdateRequest, opts ...grpc.CallOption) (*RANFunctionsTableUpdateResponse, error)
	RANFunctionsTableDelete(ctx context.Context, in *RANFunctionsTableDeleteRequest, opts ...grpc.CallOption) (*RANFunctionsTableDeleteResponse, error)
	RANFunctionsTableReadAll(ctx context.Context, in *RANFunctionsTableReadAllRequest, opts ...grpc.CallOption) (*RANFunctionsTableReadAllResponse, error)
	MOITableInsert(ctx context.Context, in *MOITableInsertRequest, opts ...grpc.CallOption) (*MOITableInsertResponse, error)
	MOITableRead(ctx context.Context, in *MOITableReadRequest, opts ...grpc.CallOption) (*MOITableReadResponse, error)
	MOITableUpdate(ctx context.Context, in *MOITableUpdateRequest, opts ...grpc.CallOption) (*MOITableUpdateResponse, error)
	MOITableDelete(ctx context.Context, in *MOITableDeleteRequest, opts ...grpc.CallOption) (*MOITableDeleteResponse, error)
	MOITableReadAll(ctx context.Context, in *MOITableReadAllRequest, opts ...grpc.CallOption) (*MOITableReadAllResponse, error)
}

type dbServiceClient struct {
	cc *grpc.ClientConn
}

func NewDbServiceClient(cc *grpc.ClientConn) DbServiceClient {
	return &dbServiceClient{cc}
}

func (c *dbServiceClient) RpcHandleMsg(ctx context.Context, in *GrpcMsg, opts ...grpc.CallOption) (*GrpcReply, error) {
	out := new(GrpcReply)
	err := c.cc.Invoke(ctx, "/db.dbService/rpcHandleMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) RouteTableInsert(ctx context.Context, in *RouteTableInsertRequest, opts ...grpc.CallOption) (*RouteTableInsertResponse, error) {
	out := new(RouteTableInsertResponse)
	err := c.cc.Invoke(ctx, "/db.dbService/RouteTableInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) RouteTableRead(ctx context.Context, in *RouteTableReadRequest, opts ...grpc.CallOption) (*RouteTableReadResponse, error) {
	out := new(RouteTableReadResponse)
	err := c.cc.Invoke(ctx, "/db.dbService/RouteTableRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) RouteTableUpdate(ctx context.Context, in *RouteTableUpdateRequest, opts ...grpc.CallOption) (*RouteTableUpdateResponse, error) {
	out := new(RouteTableUpdateResponse)
	err := c.cc.Invoke(ctx, "/db.dbService/RouteTableUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) RouteTableDelete(ctx context.Context, in *RouteTableDeleteRequest, opts ...grpc.CallOption) (*RouteTableDeleteResponse, error) {
	out := new(RouteTableDeleteResponse)
	err := c.cc.Invoke(ctx, "/db.dbService/RouteTableDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) RouteTableReadAll(ctx context.Context, in *RouteTableReadAllRequest, opts ...grpc.CallOption) (*RouteTableReadAllResponse, error) {
	out := new(RouteTableReadAllResponse)
	err := c.cc.Invoke(ctx, "/db.dbService/RouteTableReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) RANFunctionsTableInsert(ctx context.Context, in *RANFunctionsTableInsertRequest, opts ...grpc.CallOption) (*RANFunctionsTableInsertResponse, error) {
	out := new(RANFunctionsTableInsertResponse)
	err := c.cc.Invoke(ctx, "/db.dbService/RANFunctionsTableInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) RANFunctionsTableRead(ctx context.Context, in *RANFunctionsTableReadRequest, opts ...grpc.CallOption) (*RANFunctionsTableReadResponse, error) {
	out := new(RANFunctionsTableReadResponse)
	err := c.cc.Invoke(ctx, "/db.dbService/RANFunctionsTableRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) RANFunctionsTableUpdate(ctx context.Context, in *RANFunctionsTableUpdateRequest, opts ...grpc.CallOption) (*RANFunctionsTableUpdateResponse, error) {
	out := new(RANFunctionsTableUpdateResponse)
	err := c.cc.Invoke(ctx, "/db.dbService/RANFunctionsTableUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) RANFunctionsTableDelete(ctx context.Context, in *RANFunctionsTableDeleteRequest, opts ...grpc.CallOption) (*RANFunctionsTableDeleteResponse, error) {
	out := new(RANFunctionsTableDeleteResponse)
	err := c.cc.Invoke(ctx, "/db.dbService/RANFunctionsTableDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) RANFunctionsTableReadAll(ctx context.Context, in *RANFunctionsTableReadAllRequest, opts ...grpc.CallOption) (*RANFunctionsTableReadAllResponse, error) {
	out := new(RANFunctionsTableReadAllResponse)
	err := c.cc.Invoke(ctx, "/db.dbService/RANFunctionsTableReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) MOITableInsert(ctx context.Context, in *MOITableInsertRequest, opts ...grpc.CallOption) (*MOITableInsertResponse, error) {
	out := new(MOITableInsertResponse)
	err := c.cc.Invoke(ctx, "/db.dbService/MOITableInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) MOITableRead(ctx context.Context, in *MOITableReadRequest, opts ...grpc.CallOption) (*MOITableReadResponse, error) {
	out := new(MOITableReadResponse)
	err := c.cc.Invoke(ctx, "/db.dbService/MOITableRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) MOITableUpdate(ctx context.Context, in *MOITableUpdateRequest, opts ...grpc.CallOption) (*MOITableUpdateResponse, error) {
	out := new(MOITableUpdateResponse)
	err := c.cc.Invoke(ctx, "/db.dbService/MOITableUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) MOITableDelete(ctx context.Context, in *MOITableDeleteRequest, opts ...grpc.CallOption) (*MOITableDeleteResponse, error) {
	out := new(MOITableDeleteResponse)
	err := c.cc.Invoke(ctx, "/db.dbService/MOITableDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) MOITableReadAll(ctx context.Context, in *MOITableReadAllRequest, opts ...grpc.CallOption) (*MOITableReadAllResponse, error) {
	out := new(MOITableReadAllResponse)
	err := c.cc.Invoke(ctx, "/db.dbService/MOITableReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbServiceServer is the server API for DbService service.
type DbServiceServer interface {
	RpcHandleMsg(context.Context, *GrpcMsg) (*GrpcReply, error)
	RouteTableInsert(context.Context, *RouteTableInsertRequest) (*RouteTableInsertResponse, error)
	RouteTableRead(context.Context, *RouteTableReadRequest) (*RouteTableReadResponse, error)
	RouteTableUpdate(context.Context, *RouteTableUpdateRequest) (*RouteTableUpdateResponse, error)
	RouteTableDelete(context.Context, *RouteTableDeleteRequest) (*RouteTableDeleteResponse, error)
	RouteTableReadAll(context.Context, *RouteTableReadAllRequest) (*RouteTableReadAllResponse, error)
	RANFunctionsTableInsert(context.Context, *RANFunctionsTableInsertRequest) (*RANFunctionsTableInsertResponse, error)
	RANFunctionsTableRead(context.Context, *RANFunctionsTableReadRequest) (*RANFunctionsTableReadResponse, error)
	RANFunctionsTableUpdate(context.Context, *RANFunctionsTableUpdateRequest) (*RANFunctionsTableUpdateResponse, error)
	RANFunctionsTableDelete(context.Context, *RANFunctionsTableDeleteRequest) (*RANFunctionsTableDeleteResponse, error)
	RANFunctionsTableReadAll(context.Context, *RANFunctionsTableReadAllRequest) (*RANFunctionsTableReadAllResponse, error)
	MOITableInsert(context.Context, *MOITableInsertRequest) (*MOITableInsertResponse, error)
	MOITableRead(context.Context, *MOITableReadRequest) (*MOITableReadResponse, error)
	MOITableUpdate(context.Context, *MOITableUpdateRequest) (*MOITableUpdateResponse, error)
	MOITableDelete(context.Context, *MOITableDeleteRequest) (*MOITableDeleteResponse, error)
	MOITableReadAll(context.Context, *MOITableReadAllRequest) (*MOITableReadAllResponse, error)
}

func RegisterDbServiceServer(s *grpc.Server, srv DbServiceServer) {
	s.RegisterService(&_DbService_serviceDesc, srv)
}

func _DbService_RpcHandleMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).RpcHandleMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.dbService/RpcHandleMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).RpcHandleMsg(ctx, req.(*GrpcMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_RouteTableInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTableInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).RouteTableInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.dbService/RouteTableInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).RouteTableInsert(ctx, req.(*RouteTableInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_RouteTableRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTableReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).RouteTableRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.dbService/RouteTableRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).RouteTableRead(ctx, req.(*RouteTableReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_RouteTableUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTableUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).RouteTableUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.dbService/RouteTableUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).RouteTableUpdate(ctx, req.(*RouteTableUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_RouteTableDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTableDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).RouteTableDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.dbService/RouteTableDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).RouteTableDelete(ctx, req.(*RouteTableDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_RouteTableReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTableReadAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).RouteTableReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.dbService/RouteTableReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).RouteTableReadAll(ctx, req.(*RouteTableReadAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_RANFunctionsTableInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RANFunctionsTableInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).RANFunctionsTableInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.dbService/RANFunctionsTableInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).RANFunctionsTableInsert(ctx, req.(*RANFunctionsTableInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_RANFunctionsTableRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RANFunctionsTableReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).RANFunctionsTableRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.dbService/RANFunctionsTableRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).RANFunctionsTableRead(ctx, req.(*RANFunctionsTableReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_RANFunctionsTableUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RANFunctionsTableUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).RANFunctionsTableUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.dbService/RANFunctionsTableUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).RANFunctionsTableUpdate(ctx, req.(*RANFunctionsTableUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_RANFunctionsTableDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RANFunctionsTableDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).RANFunctionsTableDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.dbService/RANFunctionsTableDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).RANFunctionsTableDelete(ctx, req.(*RANFunctionsTableDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_RANFunctionsTableReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RANFunctionsTableReadAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).RANFunctionsTableReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.dbService/RANFunctionsTableReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).RANFunctionsTableReadAll(ctx, req.(*RANFunctionsTableReadAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_MOITableInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MOITableInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).MOITableInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.dbService/MOITableInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).MOITableInsert(ctx, req.(*MOITableInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_MOITableRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MOITableReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).MOITableRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.dbService/MOITableRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).MOITableRead(ctx, req.(*MOITableReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_MOITableUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MOITableUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).MOITableUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.dbService/MOITableUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).MOITableUpdate(ctx, req.(*MOITableUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_MOITableDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MOITableDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).MOITableDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.dbService/MOITableDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).MOITableDelete(ctx, req.(*MOITableDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_MOITableReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MOITableReadAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).MOITableReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.dbService/MOITableReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).MOITableReadAll(ctx, req.(*MOITableReadAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DbService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "db.dbService",
	HandlerType: (*DbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "rpcHandleMsg",
			Handler:    _DbService_RpcHandleMsg_Handler,
		},
		{
			MethodName: "RouteTableInsert",
			Handler:    _DbService_RouteTableInsert_Handler,
		},
		{
			MethodName: "RouteTableRead",
			Handler:    _DbService_RouteTableRead_Handler,
		},
		{
			MethodName: "RouteTableUpdate",
			Handler:    _DbService_RouteTableUpdate_Handler,
		},
		{
			MethodName: "RouteTableDelete",
			Handler:    _DbService_RouteTableDelete_Handler,
		},
		{
			MethodName: "RouteTableReadAll",
			Handler:    _DbService_RouteTableReadAll_Handler,
		},
		{
			MethodName: "RANFunctionsTableInsert",
			Handler:    _DbService_RANFunctionsTableInsert_Handler,
		},
		{
			MethodName: "RANFunctionsTableRead",
			Handler:    _DbService_RANFunctionsTableRead_Handler,
		},
		{
			MethodName: "RANFunctionsTableUpdate",
			Handler:    _DbService_RANFunctionsTableUpdate_Handler,
		},
		{
			MethodName: "RANFunctionsTableDelete",
			Handler:    _DbService_RANFunctionsTableDelete_Handler,
		},
		{
			MethodName: "RANFunctionsTableReadAll",
			Handler:    _DbService_RANFunctionsTableReadAll_Handler,
		},
		{
			MethodName: "MOITableInsert",
			Handler:    _DbService_MOITableInsert_Handler,
		},
		{
			MethodName: "MOITableRead",
			Handler:    _DbService_MOITableRead_Handler,
		},
		{
			MethodName: "MOITableUpdate",
			Handler:    _DbService_MOITableUpdate_Handler,
		},
		{
			MethodName: "MOITableDelete",
			Handler:    _DbService_MOITableDelete_Handler,
		},
		{
			MethodName: "MOITableReadAll",
			Handler:    _DbService_MOITableReadAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbsvc.proto",
}

func init() { proto.RegisterFile("dbsvc.proto", fileDescriptor_dbsvc_78cbf87727d25476) }

var fileDescriptor_dbsvc_78cbf87727d25476 = []byte{
	// 904 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x5f, 0x8f, 0xdb, 0x44,
	0x10, 0xc7, 0xc9, 0xe5, 0xb8, 0x4c, 0xfe, 0xd0, 0x5b, 0x08, 0xe7, 0xba, 0x69, 0x1b, 0x9c, 0xaa,
	0xca, 0x43, 0xe5, 0x56, 0x29, 0xe2, 0x85, 0xa7, 0xa3, 0x69, 0x43, 0x4e, 0xca, 0x1d, 0xda, 0x1c,
	0x12, 0x3a, 0x90, 0x90, 0x1d, 0xef, 0x45, 0x96, 0x1c, 0xdb, 0xd8, 0x4e, 0x10, 0xe2, 0x6b, 0x20,
	0xbe, 0x06, 0xdf, 0x08, 0xf1, 0x51, 0x50, 0xec, 0x75, 0xbc, 0x6b, 0xef, 0x3a, 0x44, 0xba, 0x17,
	0xde, 0xb2, 0x33, 0xe3, 0xdf, 0xfc, 0x76, 0xe6, 0x37, 0xb3, 0x81, 0x96, 0x6d, 0x45, 0xdb, 0xa5,
	0x11, 0x84, 0x7e, 0xec, 0xa3, 0x9a, 0x6d, 0x69, 0xcf, 0x57, 0xbe, 0xbf, 0x72, 0xc9, 0xeb, 0xc4,
	0x62, 0x6d, 0xee, 0x5f, 0xc7, 0xce, 0x9a, 0x44, 0xb1, 0xb9, 0x0e, 0xd2, 0x20, 0xad, 0xbd, 0x8e,
	0x56, 0x36, 0xb9, 0xa7, 0xa7, 0xee, 0xda, 0x77, 0x62, 0xd3, 0x72, 0x49, 0x7a, 0xd6, 0xff, 0x50,
	0x00, 0xb0, 0xbf, 0x89, 0xc9, 0xed, 0xce, 0x88, 0xfa, 0xd0, 0x5c, 0x6c, 0xac, 0x99, 0xfd, 0x83,
	0x19, 0x04, 0xaa, 0x32, 0x50, 0x46, 0x75, 0x9c, 0x1b, 0xd0, 0x67, 0xd0, 0xb8, 0xf5, 0x03, 0x67,
	0xa9, 0xd6, 0x06, 0xca, 0xa8, 0x89, 0xd3, 0x03, 0xd2, 0xe0, 0x2c, 0x09, 0xc1, 0xa6, 0xa7, 0xd6,
	0x93, 0x4f, 0xf6, 0x67, 0xf4, 0x15, 0x9c, 0x85, 0x64, 0xed, 0x78, 0x36, 0x09, 0xd5, 0x93, 0x81,
	0x32, 0x6a, 0x8d, 0x35, 0x23, 0x25, 0x6c, 0x64, 0x84, 0x8d, 0xdb, 0x8c, 0x30, 0xde, 0xc7, 0xea,
	0x3f, 0xc2, 0x45, 0xce, 0x6a, 0xe6, 0x45, 0x24, 0x8c, 0x31, 0xf9, 0x65, 0x43, 0xa2, 0x18, 0x3d,
	0x82, 0xba, 0x19, 0x38, 0x09, 0xb9, 0x26, 0xde, 0xfd, 0x44, 0x06, 0x40, 0xb8, 0x0f, 0x4e, 0xb8,
	0xb5, 0xc6, 0x5d, 0xc3, 0xb6, 0x8c, 0x1c, 0x02, 0x33, 0x11, 0xfa, 0x15, 0xa8, 0x65, 0xf0, 0x28,
	0xf0, 0xbd, 0x88, 0x08, 0xd0, 0xb9, 0x92, 0xd4, 0x0a, 0x25, 0xd1, 0xa7, 0xd0, 0x63, 0xb2, 0x10,
	0xd3, 0x96, 0xd3, 0xac, 0x06, 0xba, 0x83, 0xcf, 0x8b, 0x40, 0x52, 0x4a, 0xc7, 0x5e, 0x98, 0xab,
	0xe6, 0xf7, 0x81, 0x6d, 0xc6, 0xe4, 0xe1, 0xaa, 0xf9, 0x81, 0xad, 0x66, 0x06, 0x2e, 0xa5, 0xae,
	0xc2, 0xc7, 0x9b, 0x24, 0xc6, 0xa6, 0x25, 0xc8, 0x8e, 0xfa, 0x8c, 0x25, 0x39, 0x21, 0x2e, 0xa9,
	0x22, 0x59, 0x5d, 0x4b, 0x8e, 0x52, 0x06, 0x55, 0x45, 0xc9, 0x4e, 0x62, 0xf6, 0x94, 0xe8, 0x51,
	0x7f, 0xc5, 0xe2, 0xec, 0x7a, 0x72, 0xe9, 0xba, 0x52, 0x4e, 0xfa, 0xcf, 0xf0, 0x58, 0x10, 0x2d,
	0x4d, 0xfb, 0x06, 0x5a, 0x79, 0x15, 0x23, 0xb5, 0x36, 0xa8, 0x0b, 0x0a, 0xcd, 0x86, 0xe8, 0x7f,
	0xd5, 0xe0, 0x1c, 0x5f, 0x5e, 0x7f, 0xd8, 0x78, 0xcb, 0xd8, 0xf1, 0xbd, 0x28, 0x1d, 0xd9, 0x57,
	0x70, 0x3e, 0x75, 0x7d, 0xcb, 0x74, 0xdf, 0x8f, 0xaf, 0x7d, 0x9b, 0xcc, 0x26, 0x8b, 0x38, 0xa4,
	0x79, 0xca, 0x0e, 0xf4, 0x02, 0x3a, 0xa1, 0xe9, 0x65, 0x10, 0xb3, 0x49, 0x72, 0xe5, 0x0e, 0xe6,
	0x8d, 0xe8, 0x0d, 0x7c, 0xca, 0x18, 0x30, 0xd9, 0x3a, 0x91, 0xe3, 0xa7, 0xd3, 0xdd, 0xc1, 0x22,
	0x17, 0x7a, 0x09, 0x5d, 0xc6, 0x7c, 0x33, 0x9b, 0x24, 0xe3, 0xde, 0xc4, 0x05, 0x2b, 0xfa, 0x12,
	0x7a, 0x8c, 0x65, 0x42, 0xee, 0x1d, 0xcf, 0xd9, 0xfd, 0x52, 0x1b, 0x03, 0x65, 0xd4, 0xc6, 0x62,
	0x27, 0xb7, 0x46, 0x4e, 0x8f, 0x58, 0x23, 0xbf, 0xc2, 0xb3, 0x52, 0xc1, 0x0e, 0x6d, 0x93, 0x77,
	0x82, 0x22, 0xd3, 0x31, 0xe8, 0x25, 0xdd, 0x29, 0x3a, 0x71, 0x39, 0x5e, 0x5f, 0xc0, 0x73, 0x69,
	0x62, 0xa9, 0x22, 0x9e, 0x01, 0x60, 0x12, 0x6d, 0xdc, 0xf8, 0x9d, 0x6f, 0xa7, 0x29, 0x1b, 0x98,
	0xb1, 0xe8, 0x7f, 0x2b, 0xd0, 0x2f, 0x67, 0xaf, 0xdc, 0x39, 0x42, 0x71, 0xd4, 0xfe, 0xb3, 0x38,
	0xea, 0x47, 0x88, 0xe3, 0xe4, 0x18, 0x71, 0x34, 0x44, 0xe2, 0xd0, 0xb7, 0xf0, 0x54, 0x72, 0x3f,
	0x69, 0xcd, 0x1e, 0xa4, 0x5b, 0x22, 0x99, 0x1c, 0x5a, 0x93, 0x0f, 0x92, 0x78, 0x2e, 0x90, 0xc9,
	0xb1, 0x2b, 0xb4, 0x93, 0xaf, 0xd0, 0x7f, 0x14, 0xc1, 0x45, 0x0e, 0xad, 0xd2, 0xff, 0x97, 0x44,
	0x44, 0x15, 0x3b, 0x76, 0xc3, 0x77, 0xf2, 0x0d, 0xff, 0x56, 0x00, 0x77, 0x70, 0xd1, 0xff, 0x0e,
	0x03, 0xf9, 0x47, 0x52, 0x12, 0xef, 0x01, 0x95, 0xbe, 0xca, 0xd6, 0xbe, 0x44, 0x31, 0x82, 0x0f,
	0xc6, 0x7f, 0x02, 0x34, 0x6d, 0x6b, 0x41, 0xc2, 0xad, 0xb3, 0x24, 0xe8, 0x25, 0xb4, 0xc3, 0x60,
	0xf9, 0xad, 0xe9, 0xd9, 0x2e, 0x99, 0x47, 0x2b, 0x74, 0x66, 0x4c, 0xc3, 0x60, 0x39, 0x8f, 0x56,
	0x1a, 0x24, 0xbf, 0x30, 0x09, 0xdc, 0xdf, 0xf4, 0x8f, 0xd0, 0x1c, 0x1e, 0x15, 0xff, 0xf2, 0xa0,
	0x27, 0xfc, 0x5b, 0xc3, 0xed, 0x45, 0xad, 0x2f, 0x76, 0xd2, 0xdb, 0x4d, 0xa1, 0xcb, 0x3f, 0x75,
	0xe8, 0x71, 0xe1, 0xe1, 0xca, 0xb7, 0x92, 0xa6, 0x89, 0x5c, 0x14, 0x88, 0xe3, 0x95, 0x2a, 0xbf,
	0xc8, 0x8b, 0x1b, 0xc4, 0x22, 0xaf, 0xc2, 0xb0, 0x70, 0x70, 0xa9, 0x2c, 0x8a, 0x70, 0xdc, 0x38,
	0x14, 0xe1, 0x0a, 0x4a, 0xfa, 0x0e, 0xce, 0x4b, 0x2f, 0x3a, 0xea, 0x97, 0xaf, 0x93, 0xab, 0x45,
	0x7b, 0x2a, 0xf1, 0x52, 0x44, 0x0b, 0x2e, 0x24, 0xef, 0x02, 0xd2, 0x85, 0x1a, 0xe0, 0xbb, 0x32,
	0xac, 0x8c, 0xa1, 0x39, 0x7e, 0x82, 0x9e, 0x50, 0x9e, 0x68, 0x20, 0x56, 0x19, 0xd3, 0xaa, 0x2f,
	0x2a, 0x22, 0x2a, 0x6e, 0x40, 0x1b, 0x27, 0xbe, 0x01, 0xdf, 0xbf, 0x61, 0x65, 0x4c, 0x45, 0x0e,
	0xda, 0x4d, 0x71, 0x0e, 0xbe, 0xa9, 0xc3, 0xca, 0x18, 0x9a, 0x83, 0x80, 0x2a, 0x1b, 0x62, 0x34,
	0x94, 0x96, 0x81, 0xe9, 0xf4, 0x8b, 0xea, 0xa0, 0x7c, 0x52, 0xe6, 0x37, 0x33, 0xb6, 0xcf, 0xc9,
	0xa4, 0xf0, 0x36, 0x6e, 0x52, 0x8a, 0x2e, 0x0a, 0x74, 0x09, 0xed, 0xcc, 0x93, 0x34, 0xf3, 0x82,
	0x8d, 0x65, 0x7b, 0xa8, 0x96, 0x1d, 0x65, 0x2e, 0xb4, 0x63, 0x1c, 0x17, 0xbe, 0x51, 0x9a, 0xc8,
	0x55, 0x06, 0xa2, 0x6d, 0xe1, 0x80, 0xf8, 0x6e, 0x68, 0x22, 0x17, 0x05, 0xba, 0x82, 0x4f, 0x58,
	0xa6, 0xbb, 0xda, 0x6b, 0x45, 0xfa, 0x4c, 0xc9, 0x9f, 0x08, 0x7d, 0x29, 0xd6, 0x37, 0xa7, 0x77,
	0x27, 0xc6, 0xd7, 0xb6, 0x65, 0x9d, 0x26, 0xff, 0x08, 0xdf, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0xa6, 0x80, 0x8a, 0x7f, 0x2a, 0x0f, 0x00, 0x00,
}
