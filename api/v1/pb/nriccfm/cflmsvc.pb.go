// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cflmsvc.proto

package cflm // import "."

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/protobuf/types/known/timestamppb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CflmServiceClient is the client API for CflmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CflmServiceClient interface {
	RpcHandleMsg(ctx context.Context, in *GrpcMsg, opts ...grpc.CallOption) (*GrpcReply, error)
}

type cflmServiceClient struct {
	cc *grpc.ClientConn
}

func NewCflmServiceClient(cc *grpc.ClientConn) CflmServiceClient {
	return &cflmServiceClient{cc}
}

func (c *cflmServiceClient) RpcHandleMsg(ctx context.Context, in *GrpcMsg, opts ...grpc.CallOption) (*GrpcReply, error) {
	out := new(GrpcReply)
	err := c.cc.Invoke(ctx, "/cflm.cflmService/rpcHandleMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CflmServiceServer is the server API for CflmService service.
type CflmServiceServer interface {
	RpcHandleMsg(context.Context, *GrpcMsg) (*GrpcReply, error)
}

func RegisterCflmServiceServer(s *grpc.Server, srv CflmServiceServer) {
	s.RegisterService(&_CflmService_serviceDesc, srv)
}

func _CflmService_RpcHandleMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CflmServiceServer).RpcHandleMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cflm.cflmService/RpcHandleMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CflmServiceServer).RpcHandleMsg(ctx, req.(*GrpcMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _CflmService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cflm.cflmService",
	HandlerType: (*CflmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "rpcHandleMsg",
			Handler:    _CflmService_RpcHandleMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cflmsvc.proto",
}

func init() { proto.RegisterFile("cflmsvc.proto", fileDescriptor_cflmsvc_cdb85cd45b3b4027) }

var fileDescriptor_cflmsvc_cdb85cd45b3b4027 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4e, 0xcb, 0xc9,
	0x2d, 0x2e, 0x4b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0x71, 0xa5, 0xe4, 0xd3,
	0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0x62, 0x49, 0xa5, 0x69, 0xfa, 0x25, 0x99, 0xb9, 0xa9,
	0xc5, 0x25, 0x89, 0xb9, 0x05, 0x10, 0x65, 0x52, 0x5c, 0xb9, 0xc5, 0xe9, 0x15, 0x10, 0xb6, 0x91,
	0x29, 0x17, 0x37, 0x48, 0x53, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x1a, 0x17, 0x4f,
	0x51, 0x41, 0xb2, 0x47, 0x62, 0x5e, 0x4a, 0x4e, 0xaa, 0x6f, 0x71, 0xba, 0x10, 0x87, 0x9e, 0x7b,
	0x51, 0x41, 0xb2, 0x6f, 0x71, 0xba, 0x14, 0x17, 0x98, 0x15, 0x94, 0x5a, 0x90, 0x53, 0xa9, 0xc4,
	0xe0, 0xc4, 0x11, 0xc5, 0xa6, 0x67, 0x0d, 0xd2, 0x98, 0xc4, 0x06, 0x36, 0xc7, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0x7f, 0x8d, 0xd9, 0x23, 0x8b, 0x00, 0x00, 0x00,
}
