// Code generated by protoc-gen-go. DO NOT EDIT.
// source: e2tsvc.proto

package e2t // import "."

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamppb "google.golang.org/protobuf/types/known/timestamppb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
type RouteTable struct {
	// Unique integer identifier of the route table
	SubIdXapp int64 `protobuf:"varint,1,opt,name=SubIdXapp,proto3" json:"SubIdXapp,omitempty"`
	// output
	Topic    string `protobuf:"bytes,2,opt,name=Topic,proto3" json:"Topic,omitempty"`
	SubIdRan int64  `protobuf:"varint,3,opt,name=SubIdRan,proto3" json:"SubIdRan,omitempty"`
	// Date and time to remind the route table
	Reminder             *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=reminder,proto3" json:"reminder,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RouteTable) Reset()         { *m = RouteTable{} }
func (m *RouteTable) String() string { return proto.CompactTextString(m) }
func (*RouteTable) ProtoMessage()    {}
func (*RouteTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2tsvc_1aab5e0ff1e33327, []int{0}
}
func (m *RouteTable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTable.Unmarshal(m, b)
}
func (m *RouteTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTable.Marshal(b, m, deterministic)
}
func (dst *RouteTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTable.Merge(dst, src)
}
func (m *RouteTable) XXX_Size() int {
	return xxx_messageInfo_RouteTable.Size(m)
}
func (m *RouteTable) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTable.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTable proto.InternalMessageInfo

func (m *RouteTable) GetSubIdXapp() int64 {
	if m != nil {
		return m.SubIdXapp
	}
	return 0
}

func (m *RouteTable) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *RouteTable) GetSubIdRan() int64 {
	if m != nil {
		return m.SubIdRan
	}
	return 0
}

func (m *RouteTable) GetReminder() *timestamppb.Timestamp {
	if m != nil {
		return m.Reminder
	}
	return nil
}

// Request data to create new route table
type RouteTableInsertRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Task entity to add
	RouteTable           *RouteTable `protobuf:"bytes,2,opt,name=routeTable,proto3" json:"routeTable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RouteTableInsertRequest) Reset()         { *m = RouteTableInsertRequest{} }
func (m *RouteTableInsertRequest) String() string { return proto.CompactTextString(m) }
func (*RouteTableInsertRequest) ProtoMessage()    {}
func (*RouteTableInsertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2tsvc_1aab5e0ff1e33327, []int{1}
}
func (m *RouteTableInsertRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableInsertRequest.Unmarshal(m, b)
}
func (m *RouteTableInsertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableInsertRequest.Marshal(b, m, deterministic)
}
func (dst *RouteTableInsertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableInsertRequest.Merge(dst, src)
}
func (m *RouteTableInsertRequest) XXX_Size() int {
	return xxx_messageInfo_RouteTableInsertRequest.Size(m)
}
func (m *RouteTableInsertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableInsertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableInsertRequest proto.InternalMessageInfo

func (m *RouteTableInsertRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableInsertRequest) GetRouteTable() *RouteTable {
	if m != nil {
		return m.RouteTable
	}
	return nil
}

// Contains data of created route table
type RouteTableInsertResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// SubId of created task
	SubIdXapp            int64    `protobuf:"varint,2,opt,name=SubIdXapp,proto3" json:"SubIdXapp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteTableInsertResponse) Reset()         { *m = RouteTableInsertResponse{} }
func (m *RouteTableInsertResponse) String() string { return proto.CompactTextString(m) }
func (*RouteTableInsertResponse) ProtoMessage()    {}
func (*RouteTableInsertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2tsvc_1aab5e0ff1e33327, []int{2}
}
func (m *RouteTableInsertResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableInsertResponse.Unmarshal(m, b)
}
func (m *RouteTableInsertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableInsertResponse.Marshal(b, m, deterministic)
}
func (dst *RouteTableInsertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableInsertResponse.Merge(dst, src)
}
func (m *RouteTableInsertResponse) XXX_Size() int {
	return xxx_messageInfo_RouteTableInsertResponse.Size(m)
}
func (m *RouteTableInsertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableInsertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableInsertResponse proto.InternalMessageInfo

func (m *RouteTableInsertResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableInsertResponse) GetSubIdXapp() int64 {
	if m != nil {
		return m.SubIdXapp
	}
	return 0
}

// Request data to read route table
type RouteTableReadRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Unique integer identifier of the route table
	SubIdXapp            int64    `protobuf:"varint,2,opt,name=SubIdXapp,proto3" json:"SubIdXapp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteTableReadRequest) Reset()         { *m = RouteTableReadRequest{} }
func (m *RouteTableReadRequest) String() string { return proto.CompactTextString(m) }
func (*RouteTableReadRequest) ProtoMessage()    {}
func (*RouteTableReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2tsvc_1aab5e0ff1e33327, []int{3}
}
func (m *RouteTableReadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableReadRequest.Unmarshal(m, b)
}
func (m *RouteTableReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableReadRequest.Marshal(b, m, deterministic)
}
func (dst *RouteTableReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableReadRequest.Merge(dst, src)
}
func (m *RouteTableReadRequest) XXX_Size() int {
	return xxx_messageInfo_RouteTableReadRequest.Size(m)
}
func (m *RouteTableReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableReadRequest proto.InternalMessageInfo

func (m *RouteTableReadRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableReadRequest) GetSubIdXapp() int64 {
	if m != nil {
		return m.SubIdXapp
	}
	return 0
}

// Contains route table data specified in by ID request
type RouteTableReadResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Task entity read by SubIdXapp
	RouteTable           *RouteTable `protobuf:"bytes,2,opt,name=routeTable,proto3" json:"routeTable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RouteTableReadResponse) Reset()         { *m = RouteTableReadResponse{} }
func (m *RouteTableReadResponse) String() string { return proto.CompactTextString(m) }
func (*RouteTableReadResponse) ProtoMessage()    {}
func (*RouteTableReadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2tsvc_1aab5e0ff1e33327, []int{4}
}
func (m *RouteTableReadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableReadResponse.Unmarshal(m, b)
}
func (m *RouteTableReadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableReadResponse.Marshal(b, m, deterministic)
}
func (dst *RouteTableReadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableReadResponse.Merge(dst, src)
}
func (m *RouteTableReadResponse) XXX_Size() int {
	return xxx_messageInfo_RouteTableReadResponse.Size(m)
}
func (m *RouteTableReadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableReadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableReadResponse proto.InternalMessageInfo

func (m *RouteTableReadResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableReadResponse) GetRouteTable() *RouteTable {
	if m != nil {
		return m.RouteTable
	}
	return nil
}

// Request data to update route table
type RouteTableUpdateRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Task entity to update
	RouteTable           *RouteTable `protobuf:"bytes,2,opt,name=routeTable,proto3" json:"routeTable,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RouteTableUpdateRequest) Reset()         { *m = RouteTableUpdateRequest{} }
func (m *RouteTableUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*RouteTableUpdateRequest) ProtoMessage()    {}
func (*RouteTableUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2tsvc_1aab5e0ff1e33327, []int{5}
}
func (m *RouteTableUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableUpdateRequest.Unmarshal(m, b)
}
func (m *RouteTableUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableUpdateRequest.Marshal(b, m, deterministic)
}
func (dst *RouteTableUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableUpdateRequest.Merge(dst, src)
}
func (m *RouteTableUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_RouteTableUpdateRequest.Size(m)
}
func (m *RouteTableUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableUpdateRequest proto.InternalMessageInfo

func (m *RouteTableUpdateRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableUpdateRequest) GetRouteTable() *RouteTable {
	if m != nil {
		return m.RouteTable
	}
	return nil
}

// Contains status of update operation
type RouteTableUpdateResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Contains number of entities have beed updated
	// Equals 1 in case of succesfull update
	Updated              int64    `protobuf:"varint,2,opt,name=updated,proto3" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteTableUpdateResponse) Reset()         { *m = RouteTableUpdateResponse{} }
func (m *RouteTableUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*RouteTableUpdateResponse) ProtoMessage()    {}
func (*RouteTableUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2tsvc_1aab5e0ff1e33327, []int{6}
}
func (m *RouteTableUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableUpdateResponse.Unmarshal(m, b)
}
func (m *RouteTableUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableUpdateResponse.Marshal(b, m, deterministic)
}
func (dst *RouteTableUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableUpdateResponse.Merge(dst, src)
}
func (m *RouteTableUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_RouteTableUpdateResponse.Size(m)
}
func (m *RouteTableUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableUpdateResponse proto.InternalMessageInfo

func (m *RouteTableUpdateResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableUpdateResponse) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

// Request data to delete route table
type RouteTableDeleteRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Unique integer identifier of the route table to delete
	SubIdXapp            int64    `protobuf:"varint,2,opt,name=SubIdXapp,proto3" json:"SubIdXapp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteTableDeleteRequest) Reset()         { *m = RouteTableDeleteRequest{} }
func (m *RouteTableDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*RouteTableDeleteRequest) ProtoMessage()    {}
func (*RouteTableDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2tsvc_1aab5e0ff1e33327, []int{7}
}
func (m *RouteTableDeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableDeleteRequest.Unmarshal(m, b)
}
func (m *RouteTableDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableDeleteRequest.Marshal(b, m, deterministic)
}
func (dst *RouteTableDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableDeleteRequest.Merge(dst, src)
}
func (m *RouteTableDeleteRequest) XXX_Size() int {
	return xxx_messageInfo_RouteTableDeleteRequest.Size(m)
}
func (m *RouteTableDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableDeleteRequest proto.InternalMessageInfo

func (m *RouteTableDeleteRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableDeleteRequest) GetSubIdXapp() int64 {
	if m != nil {
		return m.SubIdXapp
	}
	return 0
}

// Contains status of delete operation
type RouteTableDeleteResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Contains number of entities have beed deleted
	// Equals 1 in case of succesfull delete
	Deleted              int64    `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteTableDeleteResponse) Reset()         { *m = RouteTableDeleteResponse{} }
func (m *RouteTableDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*RouteTableDeleteResponse) ProtoMessage()    {}
func (*RouteTableDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2tsvc_1aab5e0ff1e33327, []int{8}
}
func (m *RouteTableDeleteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableDeleteResponse.Unmarshal(m, b)
}
func (m *RouteTableDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableDeleteResponse.Marshal(b, m, deterministic)
}
func (dst *RouteTableDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableDeleteResponse.Merge(dst, src)
}
func (m *RouteTableDeleteResponse) XXX_Size() int {
	return xxx_messageInfo_RouteTableDeleteResponse.Size(m)
}
func (m *RouteTableDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableDeleteResponse proto.InternalMessageInfo

func (m *RouteTableDeleteResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableDeleteResponse) GetDeleted() int64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

// Request data to read all route table
type RouteTableReadAllRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteTableReadAllRequest) Reset()         { *m = RouteTableReadAllRequest{} }
func (m *RouteTableReadAllRequest) String() string { return proto.CompactTextString(m) }
func (*RouteTableReadAllRequest) ProtoMessage()    {}
func (*RouteTableReadAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2tsvc_1aab5e0ff1e33327, []int{9}
}
func (m *RouteTableReadAllRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableReadAllRequest.Unmarshal(m, b)
}
func (m *RouteTableReadAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableReadAllRequest.Marshal(b, m, deterministic)
}
func (dst *RouteTableReadAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableReadAllRequest.Merge(dst, src)
}
func (m *RouteTableReadAllRequest) XXX_Size() int {
	return xxx_messageInfo_RouteTableReadAllRequest.Size(m)
}
func (m *RouteTableReadAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableReadAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableReadAllRequest proto.InternalMessageInfo

func (m *RouteTableReadAllRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

// Contains list of all route tables
type RouteTableReadAllResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// List of all route tables
	RouteTables          []*RouteTable `protobuf:"bytes,2,rep,name=routeTables,proto3" json:"routeTables,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RouteTableReadAllResponse) Reset()         { *m = RouteTableReadAllResponse{} }
func (m *RouteTableReadAllResponse) String() string { return proto.CompactTextString(m) }
func (*RouteTableReadAllResponse) ProtoMessage()    {}
func (*RouteTableReadAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2tsvc_1aab5e0ff1e33327, []int{10}
}
func (m *RouteTableReadAllResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableReadAllResponse.Unmarshal(m, b)
}
func (m *RouteTableReadAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableReadAllResponse.Marshal(b, m, deterministic)
}
func (dst *RouteTableReadAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableReadAllResponse.Merge(dst, src)
}
func (m *RouteTableReadAllResponse) XXX_Size() int {
	return xxx_messageInfo_RouteTableReadAllResponse.Size(m)
}
func (m *RouteTableReadAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableReadAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableReadAllResponse proto.InternalMessageInfo

func (m *RouteTableReadAllResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *RouteTableReadAllResponse) GetRouteTables() []*RouteTable {
	if m != nil {
		return m.RouteTables
	}
	return nil
}

func init() {
	proto.RegisterType((*RouteTable)(nil), "e2t.RouteTable")
	proto.RegisterType((*RouteTableInsertRequest)(nil), "e2t.RouteTableInsertRequest")
	proto.RegisterType((*RouteTableInsertResponse)(nil), "e2t.RouteTableInsertResponse")
	proto.RegisterType((*RouteTableReadRequest)(nil), "e2t.RouteTableReadRequest")
	proto.RegisterType((*RouteTableReadResponse)(nil), "e2t.RouteTableReadResponse")
	proto.RegisterType((*RouteTableUpdateRequest)(nil), "e2t.RouteTableUpdateRequest")
	proto.RegisterType((*RouteTableUpdateResponse)(nil), "e2t.RouteTableUpdateResponse")
	proto.RegisterType((*RouteTableDeleteRequest)(nil), "e2t.RouteTableDeleteRequest")
	proto.RegisterType((*RouteTableDeleteResponse)(nil), "e2t.RouteTableDeleteResponse")
	proto.RegisterType((*RouteTableReadAllRequest)(nil), "e2t.RouteTableReadAllRequest")
	proto.RegisterType((*RouteTableReadAllResponse)(nil), "e2t.RouteTableReadAllResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// E2TServiceClient is the client API for E2TService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type E2TServiceClient interface {
	RpcHandleMsg(ctx context.Context, in *GrpcMsg, opts ...grpc.CallOption) (*GrpcReply, error)
	RouteTableInsert(ctx context.Context, in *RouteTableInsertRequest, opts ...grpc.CallOption) (*RouteTableInsertResponse, error)
	RouteTableRead(ctx context.Context, in *RouteTableReadRequest, opts ...grpc.CallOption) (*RouteTableReadResponse, error)
	RouteTableUpdate(ctx context.Context, in *RouteTableUpdateRequest, opts ...grpc.CallOption) (*RouteTableUpdateResponse, error)
	RouteTableDelete(ctx context.Context, in *RouteTableDeleteRequest, opts ...grpc.CallOption) (*RouteTableDeleteResponse, error)
	RouteTableReadAll(ctx context.Context, in *RouteTableReadAllRequest, opts ...grpc.CallOption) (*RouteTableReadAllResponse, error)
}

type e2TServiceClient struct {
	cc *grpc.ClientConn
}

func NewE2TServiceClient(cc *grpc.ClientConn) E2TServiceClient {
	return &e2TServiceClient{cc}
}

func (c *e2TServiceClient) RpcHandleMsg(ctx context.Context, in *GrpcMsg, opts ...grpc.CallOption) (*GrpcReply, error) {
	out := new(GrpcReply)
	err := c.cc.Invoke(ctx, "/e2t.e2tService/rpcHandleMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2TServiceClient) RouteTableInsert(ctx context.Context, in *RouteTableInsertRequest, opts ...grpc.CallOption) (*RouteTableInsertResponse, error) {
	out := new(RouteTableInsertResponse)
	err := c.cc.Invoke(ctx, "/e2t.e2tService/RouteTableInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2TServiceClient) RouteTableRead(ctx context.Context, in *RouteTableReadRequest, opts ...grpc.CallOption) (*RouteTableReadResponse, error) {
	out := new(RouteTableReadResponse)
	err := c.cc.Invoke(ctx, "/e2t.e2tService/RouteTableRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2TServiceClient) RouteTableUpdate(ctx context.Context, in *RouteTableUpdateRequest, opts ...grpc.CallOption) (*RouteTableUpdateResponse, error) {
	out := new(RouteTableUpdateResponse)
	err := c.cc.Invoke(ctx, "/e2t.e2tService/RouteTableUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2TServiceClient) RouteTableDelete(ctx context.Context, in *RouteTableDeleteRequest, opts ...grpc.CallOption) (*RouteTableDeleteResponse, error) {
	out := new(RouteTableDeleteResponse)
	err := c.cc.Invoke(ctx, "/e2t.e2tService/RouteTableDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *e2TServiceClient) RouteTableReadAll(ctx context.Context, in *RouteTableReadAllRequest, opts ...grpc.CallOption) (*RouteTableReadAllResponse, error) {
	out := new(RouteTableReadAllResponse)
	err := c.cc.Invoke(ctx, "/e2t.e2tService/RouteTableReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// E2TServiceServer is the server API for E2TService service.
type E2TServiceServer interface {
	RpcHandleMsg(context.Context, *GrpcMsg) (*GrpcReply, error)
	RouteTableInsert(context.Context, *RouteTableInsertRequest) (*RouteTableInsertResponse, error)
	RouteTableRead(context.Context, *RouteTableReadRequest) (*RouteTableReadResponse, error)
	RouteTableUpdate(context.Context, *RouteTableUpdateRequest) (*RouteTableUpdateResponse, error)
	RouteTableDelete(context.Context, *RouteTableDeleteRequest) (*RouteTableDeleteResponse, error)
	RouteTableReadAll(context.Context, *RouteTableReadAllRequest) (*RouteTableReadAllResponse, error)
}

func RegisterE2TServiceServer(s *grpc.Server, srv E2TServiceServer) {
	s.RegisterService(&_E2TService_serviceDesc, srv)
}

func _E2TService_RpcHandleMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2TServiceServer).RpcHandleMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e2t.e2tService/RpcHandleMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2TServiceServer).RpcHandleMsg(ctx, req.(*GrpcMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2TService_RouteTableInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTableInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2TServiceServer).RouteTableInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e2t.e2tService/RouteTableInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2TServiceServer).RouteTableInsert(ctx, req.(*RouteTableInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2TService_RouteTableRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTableReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2TServiceServer).RouteTableRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e2t.e2tService/RouteTableRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2TServiceServer).RouteTableRead(ctx, req.(*RouteTableReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2TService_RouteTableUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTableUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2TServiceServer).RouteTableUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e2t.e2tService/RouteTableUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2TServiceServer).RouteTableUpdate(ctx, req.(*RouteTableUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2TService_RouteTableDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTableDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2TServiceServer).RouteTableDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e2t.e2tService/RouteTableDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2TServiceServer).RouteTableDelete(ctx, req.(*RouteTableDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _E2TService_RouteTableReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteTableReadAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(E2TServiceServer).RouteTableReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e2t.e2tService/RouteTableReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(E2TServiceServer).RouteTableReadAll(ctx, req.(*RouteTableReadAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _E2TService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "e2t.e2tService",
	HandlerType: (*E2TServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "rpcHandleMsg",
			Handler:    _E2TService_RpcHandleMsg_Handler,
		},
		{
			MethodName: "RouteTableInsert",
			Handler:    _E2TService_RouteTableInsert_Handler,
		},
		{
			MethodName: "RouteTableRead",
			Handler:    _E2TService_RouteTableRead_Handler,
		},
		{
			MethodName: "RouteTableUpdate",
			Handler:    _E2TService_RouteTableUpdate_Handler,
		},
		{
			MethodName: "RouteTableDelete",
			Handler:    _E2TService_RouteTableDelete_Handler,
		},
		{
			MethodName: "RouteTableReadAll",
			Handler:    _E2TService_RouteTableReadAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "e2tsvc.proto",
}

func init() { proto.RegisterFile("e2tsvc.proto", fileDescriptor_e2tsvc_1aab5e0ff1e33327) }

var fileDescriptor_e2tsvc_1aab5e0ff1e33327 = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x4d, 0xe3, 0xba, 0xed, 0x69, 0xd1, 0x75, 0xf0, 0x4f, 0x1c, 0x77, 0xb5, 0xe4, 0x42,
	0x7a, 0x21, 0x29, 0x46, 0xf0, 0xc6, 0x2b, 0x45, 0x5c, 0x2b, 0x2c, 0xc2, 0x6c, 0x05, 0x51, 0x2f,
	0x4c, 0x93, 0xb3, 0x21, 0x90, 0x26, 0x63, 0x66, 0xb2, 0xe0, 0x7b, 0xf8, 0x4c, 0x3e, 0x97, 0x74,
	0xd2, 0x34, 0x99, 0xfc, 0x03, 0xc1, 0xbb, 0x9c, 0x99, 0xaf, 0xdf, 0xfc, 0xce, 0x37, 0x67, 0x0a,
	0x33, 0x74, 0xa5, 0xb8, 0xf6, 0x1d, 0x9e, 0xa5, 0x32, 0x25, 0x26, 0xba, 0x92, 0x3e, 0x0d, 0xd3,
	0x34, 0x8c, 0x71, 0xa9, 0x96, 0x36, 0xf9, 0xd5, 0x52, 0x46, 0x5b, 0x14, 0xd2, 0xdb, 0xf2, 0x42,
	0x45, 0x67, 0x5b, 0x11, 0x06, 0x78, 0x55, 0x54, 0xf6, 0x6f, 0x03, 0x80, 0xa5, 0xb9, 0xc4, 0xb5,
	0xb7, 0x89, 0x91, 0x9c, 0xc2, 0xe4, 0x32, 0xdf, 0xac, 0x82, 0x2f, 0x1e, 0xe7, 0x96, 0x31, 0x37,
	0x16, 0x26, 0xab, 0x16, 0xc8, 0x3d, 0x38, 0x5a, 0xa7, 0x3c, 0xf2, 0xad, 0xd1, 0xdc, 0x58, 0x4c,
	0x58, 0x51, 0x10, 0x0a, 0x63, 0x25, 0x61, 0x5e, 0x62, 0x99, 0xea, 0x27, 0x87, 0x9a, 0xbc, 0x82,
	0x71, 0x86, 0xdb, 0x28, 0x09, 0x30, 0xb3, 0x6e, 0xce, 0x8d, 0xc5, 0xd4, 0xa5, 0x4e, 0x01, 0xe8,
	0x94, 0x80, 0xce, 0xba, 0x04, 0x64, 0x07, 0xad, 0xfd, 0x1d, 0x1e, 0x56, 0x54, 0xab, 0x44, 0x60,
	0x26, 0x19, 0xfe, 0xcc, 0x51, 0x48, 0x72, 0x02, 0xa6, 0xc7, 0x23, 0x05, 0x37, 0x61, 0xbb, 0x4f,
	0xb2, 0x04, 0xc8, 0x0e, 0x62, 0xc5, 0x36, 0x75, 0xef, 0x38, 0xe8, 0x4a, 0xa7, 0xf2, 0x60, 0x35,
	0x89, 0xfd, 0x11, 0xac, 0xb6, 0xbb, 0xe0, 0x69, 0x22, 0xb0, 0xc3, 0x5e, 0xcb, 0x64, 0xd4, 0xc8,
	0xc4, 0x3e, 0x87, 0xfb, 0xb5, 0x53, 0xd0, 0x0b, 0xfa, 0x39, 0x87, 0x8d, 0xbe, 0xc1, 0x83, 0xa6,
	0x51, 0x2f, 0xd2, 0x3f, 0x77, 0xac, 0xe5, 0xf9, 0x99, 0x07, 0x9e, 0xc4, 0xff, 0x98, 0xe7, 0xfb,
	0x7a, 0x9e, 0xa5, 0x7b, 0x2f, 0xbc, 0x05, 0xc7, 0xb9, 0xd2, 0x04, 0xfb, 0x10, 0xca, 0xd2, 0x5e,
	0xd5, 0x29, 0xdf, 0x61, 0x8c, 0x43, 0x94, 0xc3, 0x69, 0x6a, 0x48, 0xa5, 0xd5, 0x10, 0x52, 0xa0,
	0x34, 0x07, 0xa4, 0x7d, 0x69, 0x3f, 0xaf, 0xfb, 0xec, 0x6e, 0xe5, 0x4d, 0x1c, 0xf7, 0x32, 0xd9,
	0x3f, 0xe0, 0x51, 0x87, 0xba, 0xf7, 0xd8, 0x17, 0x30, 0xad, 0x52, 0x14, 0xd6, 0x68, 0x6e, 0x76,
	0x25, 0x5d, 0xd7, 0xb8, 0x7f, 0x4c, 0x00, 0x74, 0xe5, 0x25, 0x66, 0xd7, 0x91, 0x8f, 0xe4, 0x19,
	0xcc, 0x32, 0xee, 0x7f, 0xf0, 0x92, 0x20, 0xc6, 0x0b, 0x11, 0x92, 0xb1, 0x73, 0x9e, 0x71, 0xff,
	0x42, 0x84, 0x14, 0xd4, 0x17, 0x43, 0x1e, 0xff, 0xb2, 0x6f, 0x90, 0x4f, 0x70, 0xd2, 0x9c, 0x78,
	0x72, 0xda, 0x38, 0x48, 0x7b, 0x66, 0xf4, 0xac, 0x67, 0x77, 0xdf, 0xcc, 0x0a, 0x6e, 0xeb, 0x9d,
	0x12, 0xda, 0xe4, 0xae, 0xde, 0x02, 0x7d, 0xdc, 0xb9, 0xb7, 0xb7, 0xd2, 0xd8, 0x8a, 0xe9, 0x69,
	0xb1, 0x69, 0x23, 0xdb, 0x62, 0x6b, 0x8c, 0x9c, 0x66, 0x58, 0xdc, 0x7d, 0xcb, 0x50, 0x9b, 0xae,
	0x96, 0x61, 0x63, 0x60, 0x18, 0xdc, 0x6d, 0x5d, 0x2b, 0x39, 0xeb, 0xe8, 0xa9, 0x1a, 0x0e, 0xfa,
	0xa4, 0x6f, 0xbb, 0xf0, 0x7c, 0x7b, 0xfc, 0xf5, 0xc8, 0x79, 0x8d, 0xae, 0xdc, 0xdc, 0x52, 0x7f,
	0x84, 0x2f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x41, 0xfb, 0xf2, 0x4b, 0xcc, 0x05, 0x00, 0x00,
}
